pipeline {
    agent any
  
    environment {
         // Storing the secret token from Jenkins as an environment variable
        REGION = 'us-east-1'  // O la región que prefieras
        STACK_NAME = 'todo-list-aws-staging'  // Nombre del stack de CloudFormation
        S3_BUCKET = 'todo-list-aws-staging'  // Nombre del bucket S3
        BASE_URL=""
    }

    stages {
     
        stage('Get Code') {
            steps {
              git branch: 'develop', url: 'https://github.com/GiovannaLeon/todo-list-aws.git'            
            }
        }

        stage('Static Test') {
            steps {
                // Ejecutar flake8 en la carpeta src/ y continuar sin importar los errores
                sh '/var/lib/jenkins/.local/bin/flake8 src/ > flake8_report.txt || true'
                
                // Ejecutar bandit en la carpeta src/ y generar el informe HTML
                sh '/var/lib/jenkins/.local/bin/bandit -r src/ -f html -o bandit_report.html || true'
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        // Comando SAM para desplegar en staging
                        sh 'sam build'
                       
                        sh 'sam validate --region us-east-1'
                        
                         // Ejecutar el despliegue con SAM y forzar la carga de archivos
                sh """
                    sam deploy --config-file samconfig.toml --config-env staging --no-confirm-changeset --no-fail-on-empty-changeset --force-upload
                """
                    
                     script {
                        sleep(10) // Espera 10 segundos antes de intentar de nuevo
                        
                    // Obtener la URL de la API usando AWS CLI (sin depender de jq)
                    def apiUrl = sh(script: """
                        aws cloudformation describe-stacks --stack-name ${STACK_NAME} --region ${REGION} --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text
                    """, returnStdout: true).trim()

                    // Verificar si se obtuvo correctamente la URL
                    if (apiUrl) {
                        // Establecer la URL en una variable de entorno
                        env.BASE_URL = apiUrl
                        echo "API BASE_URL: ${env.BASE_URL}"
                    } else {
                        error "No se pudo obtener la URL de la API desde los outputs del stack."
                    }
                }
                            

                    }
                }
            }
        }
        
        stage('Rest Test') {
            steps {
                script {
                    // Usamos catchError para manejar el error y no detener el pipeline
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            echo "ejecuta pytest"
                        /*
                            sh(script: """
                                export BASE_URL=${deployUrl}
                                pytest tests/ --maxfail=1 --disable-warnings -v
                            """)
                       */
                            } catch (Exception e) {
                            echo "Error during Todo List function invocations: ${e.message}"
                        }
                    }
                }
            }
        }


        
        stage('Promote to Production') {
            steps {
                script {
                    def mergeSuccessful = false
                    try {

                        sh 'git status'

                        // Cambiar a la rama master
                         sh 'git checkout master'
                        
                        // Traer los últimos cambios de master para evitar conflictos
                         sh 'git pull origin master'
                      
                        
                        // Hacer push a la rama master después del rebase y commit
                        withCredentials([usernamePassword(credentialsId: 'MITOKENFINAL', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                            sh '''
                                git remote set-url origin https://$GIT_USER:$GIT_PASS@github.com/GiovannaLeon/todo-list-aws.git
                                git push origin master
                            '''
                        }

                        mergeSuccessful = true
                    } catch (Exception e) {
                        mergeSuccessful = false
                        error "Merge failed or push failed: ${e.message}"
                    }

                    if (!mergeSuccessful) {
                        error "Merge or push to master failed. Aborting production deployment."
                    }
                }
            }
        }
    }
}


